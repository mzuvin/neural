self.onmessage = function(event) {
	var start = Date.now();

if (event.data.yuz)
	yuz=event.data.yuz
if (event.data.af)
	af=event.data.af
else
	af=1
if (event.data.rate)
	rate=event.data.rate
else
	rate=0.1
if (event.data.it)
	it=event.data.it
else
	it=1000

//var Layer={}
//var Neuron={}
var math={}

math.rand = function rand() {
  //return Math.random() * 0.4 - 0.2 // Random weight between -0.2 and 0.2
 return  Math.random() - 0.5;
}

// Mean squared error
math.mse = function mse(errors) {
  var sum = errors.reduce(function(sum, i) { return sum + i * i }, 0)
  return sum / errors.length
}

math.sum = function sum(array) {
  return array.reduce(function(sum, i) { return sum + i }, 0)
}

math.sigmoid = function sigmoid(x) {
  return 1 / (1 + Math.pow(Math.E, -x))
}

math.tanh1= function (x, derivate) {
    if (derivate)
      return 1 - Math.pow(Math.tanh(x), 2);
    return Math.tanh(x);
}
math.tanh= function (x, derivate) {
    var y= Math.exp(2*x)
    return (y-1) / (y+1)
}

math.relu = function (x, derivate) {
    if (derivate)
      return x > 0 ? 1 : 0;
    return x > 0 ? x : 0;
}

math.softmax = function(x){
	var max=Math.max.apply(Math, x)
	var sum=0;
	var outputs= new Array(x.length)
	for (var i = 0; i < x.length; i++) {
    	sum += x[i]
  	}
  	var sm=new Array(x.length);
  	for (var i = 0; i < x.length; i++) {
    	exps=Math.exp(x[i]-max)
    	outputs[i]=exps
  	}
  	for (var i = 0; i < x.length; i++) {
  		sm[i]=outputs[i]/sum;
  	}
  	//debugger;
  	return sm;
  	


  	/**
	exps = Math.exp(x - max)
	debugger;
    return exps / math.sum(exps)
    **/
}

class Neuron{
	constructor(numInputs){
		this.weights = new Array(numInputs)
  		this.bias = 0.5 //#math.rand()

  		for (var i = 0; i < this.weights.length; i++) {
    	this.weights[i] = math.rand()

  		}
  		//console.log(this.weights)
	}
	process(inputs) {
  		this.lastInputs = inputs
  		//debugger
	  	this.lastInputs=math.softmax(this.lastInputs)

		var sum = 0
  		for (var i = 0; i < inputs.length; i++) {
    		sum += inputs[i] * this.weights[i]
  		}
  		sum += this.bias
  		if(af==1)
	  	return this.lastOutput = math.sigmoid(sum)
	 	if(af==2)
	  	return this.lastOutput = math.tanh(sum,true)
	  	if(af==3)
	  	return this.lastOutput = math.relu(sum)
	  	//if(af==4)
	  	//return this.lastOutput = math.softmax(sum)
	}
  
}


class Layer{
	constructor(numNeurons,numInputs){
		this.neurons = new Array(numNeurons);
		for (var i = 0; i < this.neurons.length; i++) {
	      this.neurons[i] = new Neuron(numInputs)
	    }
	}
	process(inputs) {
		return this.neurons.map(function(neuron) {
      		return neuron.process(inputs)
    	})
	}

}

class Network {
	constructor(){
		this.layers = []
		this.errorThreshold = 0.0000001
		// Number of iterations on each training
		this.trainingIterations = it

		// Rate at which the network learns in each iteration
		this.learningRate = rate
	}
	addLayer(numNeurons, numInputs){
		if(numInputs==null){
			var previousLayer = this.layers[this.layers.length - 1]
	    	numInputs = previousLayer.neurons.length
		}
		var layer = new Layer(numNeurons,numInputs);
		this.layers.push(layer)
	}

	process(inputs){
		//console.log("Network process")
		//console.log(this.layers);
		//console.log("Network process")
		var outputs
  		this.layers.forEach(function(layer) {
  			//console.log("layer forEach")
  			//console.log(layer)
    		outputs = layer.process(inputs)
    		inputs = outputs
  		})
  		return outputs
	}
	
	train(examples){
		var outputLayer = this.layers[this.layers.length - 1]

	  	for (var it = 0; it < this.trainingIterations; it++) {
	    
	    	for (var e = 0; e < examples.length; e++) {
	      		var inputs = examples[e][0]
	      		var targets = examples[e][1]

	      		var outputs = this.process(inputs)

	      		for (var i = 0; i < outputLayer.neurons.length; i++) {
	        		var neuron = outputLayer.neurons[i]

	        		neuron.error = targets[i] - outputs[i]

	        		// Keep track of the error of each examples to determine when to stop training.
	        		neuron.errors = neuron.errors || []
	        		neuron.errors[e] = neuron.error

	        		neuron.delta = neuron.lastOutput * (1 - neuron.lastOutput) * neuron.error
	      		}

	      		for (var l = this.layers.length - 2; l >= 0; l--) {
	        		for (var j = 0; j < this.layers[l].neurons.length; j++) {
	          			var neuronJ = this.layers[l].neurons[j]

	          			neuronJ.error = math.sum(this.layers[l + 1].neurons.
	                    	               map(function(n) { return n.weights[j] * n.delta }))
	          			neuronJ.delta = neuronJ.lastOutput * (1 - neuronJ.lastOutput) * neuronJ.error

	          			for (var i = 0; i < this.layers[l + 1].neurons.length; i++) {
	            			var neuronI = this.layers[l + 1].neurons[i]

	            			for (var w = 0; w < neuronI.weights.length; w++) {
	              				neuronI.weights[w] += this.learningRate * neuronI.lastInputs[w] * neuronI.delta
	            			}
	            			neuronI.bias += this.learningRate * neuronI.delta
	          			}
	        		}
	      		}
	    	}

	    // Compute the mean squared error for all examples.
	    var error = math.mse(outputLayer.neurons.
	                         reduce(function(errors, n) { return errors.concat(n.errors) }, []))

	   	self.postMessage({ adim: it})
	    if (it % 100 === 0) {
	      //self.postMessage({ iteration: it, mse: error })
	      console.log({ iteration: it, mse: error })
	    }

	    if (error <= this.errorThreshold) {
	      return
	    }
	    if (error > 1) {
	      return
	    }
	    
		}
		
	}

}

var nn = new Network();
nn.addLayer(2,2);
nn.addLayer(4);
nn.addLayer(1);

yuzildef=[[1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[1,1,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,1,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,1,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,1,0],
	[0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0],
	[0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0],
	[0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0]];
yuz1=[[1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[1,1,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,1,1,0,1,1,1,0,0,0,0,0,0,0,-1,0,-1,0,0,0],
	[0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,-1,0,0],
	[0,1,1,1,1,1,0,1,0,0,0,0,-1,-1,0,0,0,0,-1,0],
	[0,1,0,1,0,1,0,1,0,0,0,0,0,0,-1,0,0,0,0,0],
	[1,0,1,0,0,0,1,0,0,0,0,0,0,0,-1,0,0,0,0,0],
	[0,0,1,1,0,1,1,1,0,0,0,0,-1,0,0,0,0,0,0,-1],
	[0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[1,0,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0],
	[0,0,0,-1,0,0,0,0,0,0,0,1,0,1,1,0,0,1,0,0],
	[0,-1,-1,0,0,0,0,0,0,0,1,0,1,0,1,1,0,0,1,0],
	[0,-1,0,-1,0,-1,0,0,0,0,0,1,0,0,0,1,0,1,0,0],
	[0,-1,0,-1,0,0,0,0,0,0,1,0,0,1,0,0,1,0,1,0],
	[0,-1,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,1,1,0],
	[0,0,0,-1,0,-1,0,0,0,0,0,0,0,0,1,1,1,1,1,0],
	[-1,0,0,0,0,0,-1,0,0,0,0,1,0,1,0,0,0,0,1,0]];

/*yuz=[[1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[1,1,1,0,0,1,0,1,0,0,0,0,0,0,-1,0,-1,0,0,-1],
	[0,1,1,0,1,1,1,0,0,0,0,0,0,0,-1,0,-1,-1,0,-1],
	[0,0,1,1,0,1,0,1,0,0,0,0,0,-1,-1,0,-1,0,0,0],
	[0,1,1,1,1,1,0,1,0,0,0,0,0,-1,-1,0,0,0,0,-1],
	[0,1,0,1,0,1,0,1,0,0,0,0,0,0,-1,-1,-1,0,0,0],
	[0,0,1,0,0,0,1,0,0,0,0,0,-1,-1,0,-1,-1,0,-1,0],
	[0,0,1,1,0,1,1,1,0,0,0,0,-1,-1,0,-1,-1,-1,0,0],
	[0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0],
	[0,-1,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,1,0,0],
	[0,0,-1,-1,0,0,0,0,0,0,0,1,1,1,1,1,0,0,1,0],
	[0,-1,-1,-1,0,0,0,0,0,0,0,1,1,1,0,1,1,1,0,0],
	[0,0,-1,0,-1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0],
	[0,-1,0,-1,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,0],
	[-1,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0],
	[-1,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0]];
*/
yuz1=[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0,0,0,0],
	[0,0,0,0,0,1,0,1,0,0,1,0,1,1,0,0,0,0,0,0],
	[0,0,0,0,0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,1,1,0,1,1,1,0,0,1,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]];


yuz1=[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,-1,0,-1,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,-1,0,-1,0,0,0,0,-1,-1,0,0,0,0,0,0,0],
	[0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,-1,0,0,0,0,0],
	[0,0,-1,0,-1,0,0,0,0,1,1,0,0,0,0,-1,0,0,0,0],
	[0,0,-1,-1,-1,0,0,0,1,1,1,1,0,0,0,0,-1,0,0,0],
	[0,0,0,-1,0,0,0,1,1,0,1,0,1,0,0,0,0,0,0,0],
	[0,0,0,-1,0,0,0,1,1,1,0,1,1,1,0,0,-1,-1,0,0],
	[0,0,0,-1,0,0,0,1,1,0,1,0,1,1,0,0,0,-1,0,0],
	[0,0,0,-1,0,0,0,0,1,1,1,1,1,1,0,0,0,-1,0,0],
	[0,0,0,-1,-1,0,0,0,0,0,0,1,1,1,0,0,0,-1,0,0],
	[0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,-1,0,0,0],
	[0,0,0,0,-1,0,-1,0,0,0,0,0,0,0,0,-1,-1,-1,0,0],
	[0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,-1,0,-1,0,0,0],
	[0,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,0,-1,-1,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,-1,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]];


w=20;
eksibir=10;//0-8
bir=10;
sifir=0;//eksibir+sifir 8+4 12

//X1=[[0.5,0.50145356,0.5029018,0.50433942,0.50576115,0.50716172,0.50853595,0.50987867,0.51118479,0.5124493,0.51366728,0.51483388,0.51594438,0.51699416,0.51797873,0.51889374,0.51973498,0.52049837,0.52118002,0.52177619],[0.52228333,0.52269807,0.52301722,0.52323781,0.52335706,0.52337242,0.52328153,0.52308227,0.52277277,0.52235135,0.52181662,0.52116738,0.52040272,0.51952196,0.51852467,0.51741068,0.51618009,0.51483324,0.51337072,0.51179342],[0.51010244,0.50829918,0.50638528,0.50436264,0.50223341,0.5,0.49766507,0.49523154,0.49270254,0.49008147,0.48737195,0.48457784,0.48170322,0.47875239,0.47572986,0.47264035,0.46948878,0.46628026,0.46302007,0.4597137],[0.45636677,0.45298508,0.44957459,0.44614136,0.44269163,0.43923172,0.43576807,0.43230724,0.42885586,0.42542064,0.42200835,0.41862582,0.41527994,0.4119776,0.40872574,0.40553128,0.40240116,0.39934229,0.39636156,0.39346579],[0.3906618,0.38795629,0.38535593,0.38286725,0.38049673,0.37825069,0.37613536,0.37415681,0.37232097,0.3706336,0.36910031,0.36772649,0.36651737,0.36547797,0.36461307,0.36392724,0.36342483,0.36310992,0.36298635,0.36305769],[0.36332725,0.36379804,0.3644728,0.36535398,0.3664437,0.3677438,0.36925579,0.37098087,0.37291991,0.37507345,0.37744169,0.3800245,0.38282142,0.38583162,0.38905394,0.39248688,0.39612858,0.39997682,0.40402905,0.40828238],[0.41273354,0.41737894,0.42221463,0.42723634,0.43243944,0.43781898,0.44336968,0.44908592,0.45496177,0.46099101,0.46716707,0.4734831,0.47993198,0.48650626,0.49319826,0.5,0.50690326,0.51389956,0.52098021,0.52813625],[0.53535855,0.54263774,0.54996428,0.55732845,0.56472037,0.57212998,0.57954711,0.58696145,0.59436258,0.60173999,0.60908308,0.61638119,0.62362359,0.63079955,0.63789827,0.64490899,0.65182092,0.65862332,0.6653055,0.67185679],[0.67826664,0.68452454,0.69062014,0.69654316,0.7022835,0.70783118,0.71317641,0.71830957,0.72322127,0.72790229,0.73234368,0.73653671,0.74047294,0.74414416,0.74754249,0.75066034,0.75349043,0.7560258,0.75825986,0.76018635],[0.76179939,0.76309346,0.76406345,0.76470464,0.76501272,0.76498379,0.76461439,0.76390149,0.76284251,0.76143531,0.75967823,0.75757004,0.75511002,0.75229789,0.74913387,0.74561866,0.74175345,0.7375399,0.73298017,0.72807692],[0.7228333,0.71725293,0.71133994,0.70509895,0.69853505,0.69165382,0.68446132,0.67696409,0.66916913,0.66108389,0.65271631,0.64407475,0.63516802,0.62600536,0.61659645,0.60695135,0.59708055,0.58699493,0.57670573,0.56622457],[0.55556343,0.54473461,0.53375077,0.52262484,0.51137007,0.5,0.48852841,0.47696933,0.46533705,0.45364603,0.44191096,0.43014669,0.41836822,0.4065907,0.3948294,0.38309969,0.371417,0.35979685,0.34825477,0.33680633],[0.32546707,0.31425255,0.30317823,0.29225954,0.28151183,0.27095031,0.26059009,0.25044611,0.24053314,0.23086578,0.22145838,0.21232509,0.20347978,0.19493607,0.18670727,0.17880636,0.17124602,0.16403856,0.15719591,0.15072963],[0.14465085,0.13897028,0.1336982,0.12884442,0.12441828,0.12042862,0.11688378,0.11379159,0.11115931,0.1089937,0.10730092,0.10608658,0.10535572,0.10511274,0.10536149,0.10610518,0.10734639,0.10908709,0.11132863,0.11407168],[0.1173163,0.12106187,0.12530716,0.13005025,0.13528856,0.14101888,0.14723732,0.15393934,0.16111975,0.16877271,0.17689172,0.18546964,0.1944987,0.20397048,0.21387596,0.22420548,0.23494878,0.246095,0.25763269,0.26954984],[0.28183384,0.29447157,0.30744933,0.32075294,0.33436767,0.34827832,0.36246922,0.37692423,0.39162677,0.40655985,0.42170608,0.43704767,0.45256649,0.46824406,0.48406159,0.5,0.51603993,0.53216177,0.54834569,0.56457168],[0.58081953,0.59706889,0.61329929,0.62949015,0.64562083,0.66167064,0.67761888,0.69344485,0.70912788,0.72464736,0.73998277,0.75511372,0.77001995,0.78468137,0.79907807,0.81319039,0.8269989,0.84048446,0.85362822,0.86641165],[0.8788166,0.89082528,0.90242029,0.91358469,0.92430197,0.9345561,0.94433155,0.9536133,0.96238691,0.97063845,0.97835463,0.98552273,0.99213066,0.99816699,1.00362094,1.00848241,1.012742,1.01639103,1.01942152,1.02182626],[1.02359878,1.02473337,1.02522511,1.02506987,1.02426429,1.02280586,1.02069283,1.01792432,1.01450023,1.01042133,1.00568918,1.00030621,0.99427566,0.98760162,0.98028901,0.97234358,0.96377192,0.95458142,0.94478032,0.93437765],[0.92338326,0.91180779,0.89966266,0.88696008,0.87371303,0.85993522,0.84564112,0.83084591,0.81556549,0.79981643,0.783616,0.76698212,0.74993332,0.73248877,0.71466822,0.69649201,0.67798101,0.65915662,0.64004073,0.62065572]]

//X2=[[0.5,0.498546445,0.497098204,0.49566058,0.494238854,0.492838276,0.491464052,0.490121335,0.488815212,0.487550699,0.486332725,0.485166123,0.484055624,0.483005842,0.482021267,0.481106257,0.480265025,0.479501633,0.478819985,0.478223812],[0.47771667,0.477301933,0.476982779,0.476762188,0.476642936,0.476627583,0.476718474,0.476917727,0.477227233,0.477648647,0.478183384,0.47883262,0.47959728,0.480478043,0.481475331,0.482589315,0.483819908,0.485166764,0.486629277,0.488206583],[0.489897559,0.491700818,0.49361472,0.495637363,0.497766593,0.5,0.502334926,0.504768464,0.507297463,0.509918534,0.512628052,0.51542216,0.518296779,0.521247609,0.524270138,0.527359647,0.530511219,0.533719745,0.536979929,0.540286304],[0.543633231,0.547014916,0.550425413,0.553858637,0.557308372,0.560768284,0.564231927,0.567692756,0.571144138,0.574579363,0.577991654,0.581374178,0.584720062,0.588022398,0.591274261,0.594468717,0.597598837,0.600657707,0.603638445,0.606534206],[0.609338201,0.612043706,0.614644074,0.617132748,0.619503273,0.621749309,0.623864641,0.625843191,0.627679033,0.629366398,0.630899694,0.632273508,0.633482625,0.634522032,0.635386933,0.636072757,0.63657517,0.636890079,0.637013649,0.636942308],[0.636672752,0.63620196,0.635527197,0.634646024,0.633556303,0.632256204,0.630744212,0.629019131,0.627080092,0.624926555,0.622558313,0.619975497,0.617178581,0.61416838,0.610946056,0.607513118,0.603871425,0.600023182,0.595970947,0.591717623],[0.587266463,0.582621064,0.577785369,0.57276366,0.567560557,0.562181017,0.556630322,0.550914082,0.545038225,0.539008993,0.532832935,0.526516898,0.520068024,0.513493738,0.506801741,0.5,0.493096741,0.486100435,0.479019793,0.471863749],[0.464641455,0.457362263,0.450035719,0.442671545,0.435279632,0.427870021,0.420452892,0.413038553,0.405637422,0.398260012,0.390916922,0.383618815,0.376376407,0.369200454,0.362101729,0.355091014,0.348179081,0.341376676,0.334694502,0.328143207],[0.321733363,0.315475456,0.309379862,0.303456838,0.297716503,0.292168823,0.286823594,0.281690427,0.276778735,0.272097711,0.267656322,0.263463287,0.259527064,0.255855838,0.252457505,0.249339657,0.246509572,0.243974197,0.241740139,0.239813648],[0.238200612,0.236906538,0.235936546,0.235295356,0.23498728,0.235016209,0.235385609,0.236098507,0.237157489,0.238564686,0.240321772,0.242429958,0.244889982,0.247702111,0.250866128,0.254381336,0.258246552,0.262460104,0.267019831,0.271923079],[0.277166704,0.282747073,0.288660059,0.294901052,0.301464952,0.30834618,0.315538676,0.323035908,0.330830873,0.338916108,0.34728369,0.355925252,0.364831983,0.373994638,0.383403554,0.393048651,0.402919448,0.413005073,0.423294273,0.43377543],[0.444436572,0.455265385,0.466249232,0.477375161,0.488629926,0.5,0.511471593,0.523030666,0.534662951,0.546353967,0.558089038,0.569853313,0.581631783,0.5934093,0.605170598,0.616900312,0.628582996,0.640203149,0.651745227,0.663193672],[0.674532925,0.685747455,0.696821773,0.707740456,0.71848817,0.729049687,0.73940991,0.749553892,0.759466858,0.769134223,0.77854162,0.787674911,0.796520215,0.805063927,0.813292733,0.821193637,0.828753976,0.835961438,0.842804086,0.849270371],[0.855349154,0.86102972,0.866301798,0.871155575,0.875581716,0.879571376,0.883116215,0.886208415,0.88884069,0.891006305,0.892699082,0.893913415,0.894644283,0.894887255,0.894638507,0.893894824,0.892653613,0.890912906,0.888671373,0.885928321],[0.882683704,0.878938125,0.874692838,0.869949755,0.864711442,0.858981124,0.852762684,0.84606066,0.838880246,0.831227288,0.823108279,0.814530358,0.8055013,0.796029516,0.786124039,0.775794521,0.765051222,0.753905002,0.742367307,0.730450162],[0.718166156,0.705528432,0.692550666,0.679247064,0.665632334,0.651721681,0.637530782,0.623075773,0.608373229,0.593440147,0.578293921,0.562952331,0.547433512,0.53175594,0.515938408,0.5,0.483960074,0.467838233,0.451654305,0.435428317],[0.419180468,0.40293111,0.386700715,0.370509854,0.354379172,0.338329356,0.322381115,0.306555149,0.290872124,0.275352645,0.260017228,0.244886276,0.229980047,0.215318634,0.200921932,0.186809612,0.173001098,0.15951554,0.146371783,0.133588346],[0.121183397,0.109174723,0.0975797077,0.0864153087,0.0756980305,0.0654439023,0.0556684545,0.0463866962,0.037613093,0.0293615458,0.0216453695,0.0144772732,0.00786934069,0.00183301125,-0.003620938,-0.0084824096,-0.0127420022,-0.0163910263,-0.0194215191,-0.0218262583],[-0.0235987756,-0.0247333684,-0.0252251115,-0.0250698671,-0.0242642944,-0.0228058578,-0.0206928342,-0.0179243197,-0.0145002347,-0.0104213281,-0.00568918084,-0.000306207786,0.00572434082,0.0123983795,0.0197109884,0.0276564156,0.0362280799,0.0454185755,0.0552196769,0.0656223458],[0.0766167379,0.0881922122,0.10033734,0.113039916,0.126286969,0.140064778,0.154358879,0.169154089,0.184434513,0.200183569,0.216383997,0.233017885,0.250066685,0.267511234,0.285331777,0.303507987,0.322018988,0.340843382,0.359959269,0.379344277]]
X1 = [];   
for (var i = 0; i < w  ; i++) {                
    X1[i] = [];                
    for (var j = 0; j < eksibir ; j++) {                    
        X1[i][j] =1;//-1di
    }
    for (var j = eksibir; j < eksibir+sifir ; j++) {                    
        X1[i][j] = -1;//0
    }
    for (var j = eksibir+sifir; j < w ; j++) {                    
        X1[i][j] = -1;
    }
}

X2=[];
for (var i = 0; i < eksibir  ; i++) {                
    X2[i] = [];                
    for (var j = 0; j < w ; j++) {                    
        X2[i][j] = -1;
    }
}
for (var i = eksibir; i < eksibir+sifir  ; i++) {                
    X2[i] = [];                
    for (var j = 0; j < w ; j++) {                    
        X2[i][j] = -1;//0, 1di
    }
}
for (var i = eksibir+sifir; i < w  ; i++) {                
    X2[i] = [];                
    for (var j = 0; j < w ; j++) {                    
        X2[i][j] = 1;//-1di
    }
}


console.log(X1);
console.log(X2);


//Canvas Data
var data=[];
for(var i=0; i<w; i++){
	for(var j=0; j<w; j++){
	data.push([	[X1[i][j],X2[j][j]], [yuz[i][j]]  ]);
}
}

function sign(x){
	if (x>0.1){
		return 1;
	}else{
		return 0;
	}
	//return 1 / ( 1 + Math.exp(-x) );
}


function play(){
	nn.train(data);
	console.log(nn);
	output=[];
	normal=[]
	for(var i=0; i<w; i++){
		for(var j=0; j<w; j++){
		output.push(nn.process([X1[i][j],X2[i][j]]));
	}
	}

	function listToMatrix(list, elementsPerSubArray) {
	    var matrix = [], i, k;

	    for (i = 0, k = -1; i < list.length; i++) {
	        if (i % elementsPerSubArray === 0) {
	            k++;
	            matrix[k] = [];
	        }

	        matrix[k].push(list[i]);
	    }

	    return matrix;
	}

	matrix1=listToMatrix(output,w)
	console.log(matrix1);
	return {matrix: matrix1};
}
    self.postMessage(play());
    console.log('ended in : ', -(start - Date.now())/1000, ' seconds');
    self.postMessage({saniye: -(start - Date.now())/1000});
}